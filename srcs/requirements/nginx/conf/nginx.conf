
# recites: -https://www.digitalocean.com/community/tutorials/how-to-create-a-self-signed-ssl-certificate-for-nginx-in-ubuntu-16-04
# recites: -https://www.youtube.com/watch?v=I_9-xWmkh28

# from  /etc/nginx/sites-available/default
server {
	listen				80 default_server;
	listen			 	[::]:80 default_server;
	server_name			yichan; #rewrite /etc/nginx/sites-available/default server_name

	location / {
		try_files $uri $uri/ =404; #check if the file is real file and exists before serving it to upstream interpreter	
	}
}

server {
	listen				443 ssl http2 default_server;
	listen				[::]:443 ssl http2 default_server;
	server_name         yichan;

	#Use ssl certificate
    ssl_certificate		/etc/ssl/certs/yichan.crt;
    ssl_certificate_key /etc/ssl/private/yichan.key;
	ssl_protocols       TLSv1.3;

	ssl_ciphers         HIGH:!aNULL:!MD5;

	# error_log /var/log/nginx/error.log warn;
	# access_log /var/log/nginx/access.log;
	
	# Specifies the enabled ciphers. The ciphers are specified in the format understood by the OpenSSL library, for example:
	# ssl_ciphers ALL:!aNULL:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;

	index index.php;
	root /var/www/html;

	error_page 404 /404.html;
    location = /404.html {
        root /usr/share/nginx/html; #root directive is used to define the root directory
        internal; #cannot be accessed directly
    }

	location ~ /.well-known/acme-challenge {
		allow all; 
		root /var/www/html;
	} # acme-challenge is a directory that Let's Encrypt uses to verify domain ownership

	location / {
		try_files $uri $uri/ /index.php$is_args$args =404;
	}

	#pass the php to FastCGI server
	location ~ \.php$ {
		try_files $uri =404;

		fastcgi_split_path_info ^(.+\.php)(/.+)$;

		fastcgi_pass wordpress:9000;

		fastcgi_index index.php; #default file that should be served when a directory is requested
		include fastcgi.conf; #include the fastcgi.conf file

		fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
		fastcgi_param PATH_INFO $fastcgi_path_info;

		# You want to ensure that you have the correct full path for the script being executed.
		# You're working in a more complex environment, especially when you might have different routing mechanisms or frameworks that expect PATH_INFO to be formatted a certain way.


		# instead of follow below snippet:

		# include snippets/fastcgi-php.conf;

		# # Nginx php-fpm sock config:
		# fastcgi_pass unix:/run/php/php8.1-fpm.sock;
		# # Nginx php-cgi config :
		# # Nginx PHP fastcgi_pass 127.0.0.1:9000;
	}

	location ~ /\.ht {
		deny all;
	} #deny access to .htaccess files (.htaccess files are used to configure Apache web servers)

	# location /adminer/ {
	# 	fastcgi_split_path_info ^(.+\.php)(/.+)$;
	# 	fastcgi_pass adminer:9000;
	# 	fastcgi_index index.php;
	# 	include fastcgi.conf;
	# 	fastcgi_param PATH_INFO $fastcgi_path_info;
	# }

	# location /static/ {
	# 	proxy_pass http://static:8080/;
	# }

	# location /prometheus/ {
	# 	proxy_pass http://prometheus:9090/;
	# }
}

# server {
#     listen 443 http2 ssl;
#     listen [::]:443 http2 ssl;

#     server_name localhost.42.fr;
#     server_name www.localhost.42.fr;

#     #SSL certificates
# 	listen 443 ssl;
#     ssl_certificate /etc/ssl/certs/yichan.crt;
#     ssl_certificate_key /etc/ssl/private/yichan.key;

#     ssl_protocols TLSv1.3;
#     root /var/www/html;

#     index index.php;

#     location / {
#         autoindex on;
#         autoindex_format html;
#         try_files $uri $uri/ /index.php?$args;
#     }

#     location ~ .php$ {
#         if (!-f $document_root$fastcgi_script_name)
#         { 
#             return 404;
#         }
#         try_files $uri =404;
#         include /etc/nginx/fastcgi_params;
#         fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
#         fastcgi_pass wordpress:9000;
#             }
# }
